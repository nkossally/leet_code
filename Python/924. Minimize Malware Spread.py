class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        adjacencies = [set() for _ in range(len(graph))]
        queue = []
        
        for (i, arr) in enumerate(graph):
            for (j, num) in enumerate(arr):
                if num == 1 and i != j:
                    adjacencies[i].add(j)
                    queue.append([i, j])
        
        made_change = True

        while made_change:
            made_change = False
            new_queue = []
            for elem in queue:
                i = elem[0]
                j = elem[1]
                indices_i = adjacencies[i].copy()
                indices_j = adjacencies[j].copy()
                for idx in indices_i:
                    if idx not in indices_j:
                        adjacencies[j].add(idx)
                        new_queue.append([idx, j])
                        new_queue.append([j, idx])
                        made_change = True

            queue = new_queue

        max_adjacencies = float("-inf")
        max_idx = min(initial)
        
        print(len(adjacencies[0]), len(graph))
        if len(adjacencies[0]) == len(graph):
            return max_idx

        for  num in initial:
            count = len(adjacencies[num])
            is_valid = True
            for elem in adjacencies[num]:
                if elem != num and elem in initial:
                    is_valid = False
                    break
            if is_valid and (count > max_adjacencies or (count == max_adjacencies and num < max_idx)):
                max_idx = num
                max_adjacencies = count
    
        return max_idx




